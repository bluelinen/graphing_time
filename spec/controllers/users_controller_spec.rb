require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: 'Johny Appleseed',
      website: 'http://appleseed.example.com',
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:sample_body) do
    <<~HTML
      <html><body>
        <h1>This is a H1</h1>
        <h3>This is a H3</h3>
        <h2>This is a H2</h2>
        <h4>This is a H4</h4>
      </body></html>
    HTML
  end

  before do
    allow(LinkShortener).to receive(:shorten_link).and_return('https://bit.ly/test')
    allow_any_instance_of(HeadingExtractor).to receive(:get).and_return(sample_body)
  end

  describe "GET #index" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'returns the name, short url, and number of friends attributes' do
      create(:user)

      get :index, params: {}, session: valid_session
      
      body = JSON.parse(response.body)
      expect(body[0]).to include('name', 'short_url', 'number_of_friends')
    end
  end

  describe "GET #show" do
    let(:user) { create(:user) }

    it "returns a success response" do
      get :show, params: {id: user.to_param}, session: valid_session
      expect(response).to be_successful
    end

    it 'displays the name, website, short url of the user' do
      get :show, params: {id: user.to_param}, session: valid_session
      body = JSON.parse(response.body)
      expect(body).to include('name', 'short_url', 'website')
    end

    it 'displays the website headings of the user' do
      user.add_heading('Cars')
      user.add_heading('Boats')
      user.add_heading('Planes')
      Heading.create!(name: 'Trains')
      get :show, params: {id: user.to_param}, session: valid_session
      headings = JSON.parse(response.body)['headings']
      expect(headings).to include('Cars', 'Boats', 'Planes')
      expect(headings).not_to include('Trains')
    end
    
    it "displays the links to their friends' pages" do
      friends = []
      (1..2).each do |i|
        friends[i] = create(:user, website: "http://friend#{i}.example.com")
        user.add_friend(friends[i].uuid)
      end
      get :show, params: { id: user.to_param }, session: valid_session
      friend_links = JSON.parse(response.body)['friend_links']
      expect(friend_links).to include("http://friend1.example.com", "http://friend2.example.com")
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}, session: valid_session
        }.to change(User, :count).by(1)
      end

      it "renders a JSON response with the new user" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.location).to eq(user_url(User.last))
      end
    end
  end

  describe 'POST #add_friend' do
    let(:user) { create(:user) }
    let(:friend) { create(:user) }
    it 'adds a friend to a user' do
      post :add_friend, params: {friend_id: friend.uuid, id: user.uuid}, session: valid_session
      expect(response).to have_http_status(:ok)
      expect(user.friends).to include(friend)
    end
  end

  describe 'GET #search' do
    let(:user) { create(:user) }
    it "returns a success response" do
      get :search, params: {id: user.to_param, query: 'hello'}, session: valid_session
      expect(response).to be_successful
    end

    context 'a simple graph' do
      (1..4).each do |i|
        let(:"u#{i}") { create(:user) }
      end

      before do
        FriendOf.create(from_node: u1, to_node: u2)
        FriendOf.create(from_node: u1, to_node: u4)
        FriendOf.create(from_node: u2, to_node: u3)
        heading = Heading.create!(name: 'superman')
        Expertise.create(from_node: heading, to_node: u3)
      end

      it 'renders the expert correctly' do
        get :search, params: {id: u1.to_param, query: 'superman'}, session: valid_session
        body = JSON.parse(response.body)
        expect(body[0]['path']).to include(u1.uuid, u2.uuid, u3.uuid)
      end
    end
  end

end
